# This is a basic workflow to help you get started with Actions

name: PULL_REQUEST_RAISE

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pr_comment:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # needed to checkout all branches for this Action to work

      # Check the PR diff using the current branch and the base branch of the PR
      - uses: GrantBirki/git-diff-action@v2.2.0
        id: git-diff-action
        with:
          json_diff_file_output: diff.json
          raw_diff_file_output: diff.txt
          file_output_only: "true"

      # Print the diff in JSON format
      - name: print json diff
        env:
          DIFF: ${{ steps.git-diff-action.outputs.json-diff-path }}
        run: |
          cat $DIFF
          jsondiff=$(cat $DIFF)
          # jsondiff_quoted="\"$jsondiff\""
          # jsondiff_quoted="'$jsondiff'"
          # echo "print json diff $jsondiff_quoted"
          # echo "---json diff quoted---- $jsondiff_quoted"

          # echo "post json diff to localhost api"
          # curl 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getjson' --header 'Content-Type: application/json'  --data $jsondiff
          # curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' \
          # --header 'Content-Type: text/plain' \
          # --data-raw $jsondiff_quoted
          
          # "WORKING CURL SAMPLE
          # curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' \
          # --header 'Content-Type: text/plain' \
          # --data '{"type":"GitDiff","files":[{"type":"AddedFile","chunks":[{"type":"Chunk","toFileRange":{"start":1,"lines":1},"fromFileRange":{"start":0,"lines":0},"changes":[{"type":"AddedLine","lineAfter":1,"content":"some file"}]}],"path":"some.txt"}]}'

          # modified=$(echo "$jsondiff_quoted" | sed 's/\[/\{/g')
          # modified=$(echo "$modified" | sed 's/\]/\}/g')
          # echo "modified string"
          # echo $modified
          #  curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' \
          # --header 'Content-Type: text/plain' \
          # --data $modified

          # working curl
          # newvar=$(printf %s "$jsondiff" | jq -s -R -r @uri)
          # echo "Value of new var $newvar"
          # curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' \
          # --header 'Content-Type: text/plain' \
          # --data $newvar

      # Print the diff in raw git format and post reqeuest with diff content
      - name: print raw diff
        env:
          DIFF: ${{ steps.git-diff-action.outputs.raw-diff-path }}
        run: |
          cat $DIFF
          jsondiff=$(cat $DIFF)
          newvar=$(printf %s "$jsondiff" | jq -s -R -r @uri)
          echo "post text diff to localhost api"
          # curl  'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' --header 'Content-Type: text/plain' --data-raw '$jsondiff'
          #working curl
          # curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' \
          # --header 'Content-Type: text/plain' \
          # --data $newvar
          
      - name: Get Diff Length
        id: get-diff-length
        run: |
          DIFF_LENGTH=$(wc -l < "${{ steps.git-diff-action.outputs.raw-diff-path }}")
          echo "Diff Length: $DIFF_LENGTH"
        shell: bash

      - name: Get PR Info Shubhang
        id: get-pr-info
        run: | 
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REVIEW_ID="${{ github.event.review.id }}"
          REVIEWERS="${{ github.event.reviewers }}"
          
          # COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/reviews/${REVIEW_ID}/comments"
          # echo "VALUE OF COMMENT URL $COMMENT_URL"
          # curl --location --request POST 'https://64c9-2001-420-c0e0-1002-00-23d.ngrok-free.app/getprurl' \
          # --header 'Content-Type: text/plain' \
          # --data $COMMENT_URL

          PULL_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/files"
          echo "PULL-URL $PULL_URL"
          curl --location --request POST 'https://3ab2-2001-420-c0e0-1007-00-12.ngrok-free.app/getprurl' \
          --header 'Authorization: Basic c2Ryb2xpYUBjaXNjby5jb206c2Ryb2xpYUBjaXNjby5jb20=' \
          --header 'Content-Type: text/plain' \
          --data-raw $PULL_URL
      
      - name: Extract Key-Value
        id: extract-key-value
        run: |
          # Assuming your JSON structure is something like {"key": "value"}
          VALUES=$(jq -r '.files[]' "${{ steps.git-diff-action.outputs.json-diff-path }}")
          echo "Extracted Value ALL: $VALUES"
          jsondiff_quoted="'$VALUES'"
          
          # curl --location 'https://25b4-2405-201-a40d-e84f-4dc4-941e-ac12-a19f.ngrok-free.app/getcontent' --data $jsondiff_quoted
          
          my_list=()
          for value in $VALUES; do
            echo "Iterating over value is: $value"
            my_list+=("$value")
            # Add your logic here for each value
          done
          # Print the final list
          echo "Final List: ${my_list[@]}"
          echo "output_title=${my_list[@]}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Iterate over Values
        run: |
          # IFS=$'\n' # Set Internal Field Separator to newline
          # for value in ${{ steps.extract-key-value.outputs.EXTVAL }}; do
          #   echo "---Iterating over value ---: $value"
          #   # Add your logic here for each value
          # done
          # echo "Iterating over value done is: ${{ steps.extract-key-value.outputs }}"
          echo "Iterating over value done is: ${{ steps.extract-key-value.outputs.output_title }}"
        
      - name: Read file contents New
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "pack.json"

      - name: File contents
        run: echo "${{ steps.read_file.outputs.contents }}"


      - name: Read Files Test For loop
        run: |
          # List of files to read
          files=("pack.json" "sample")

          # Iterate over files
          for file in ${{ steps.extract-key-value.outputs.output_title }}; do
            echo "Reading contents of $file"
            
            # Use the file-reader-action to read the file contents
            contents=$(cat "$file")
            
            # Do something with the file contents, for example, print them
            echo "Contents of $file: $contents"
          done

          #checking if curl working here
          postresponse=$(curl --location 'https://reqres.in/api/users' \
                      --header 'Content-Type: application/json' \
                      --data '{"name":"morpheus","job":"leader"}')
          echo "Curl request successful with ouput code $postresponse"
          
  file_contents:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Read file contents
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "package.json"

      - name: File contents
        run: echo "${{ steps.read_file.outputs.contents }}"
        
  analyze_git_diff:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Analyze Git Diff
        run: |
          git fetch origin ${{ github.event.before }}:$GITHUB_SHA
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt

      - name: Display Changed Files
        run: cat changed_files.txt

  get_files:
    name: run_on_pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0
  
      - name: Modified files
        run: |
          git fetch origin main:main
          git diff --name-only --diff-filter=d main~ main
          git diff --name-only origin/main origin/${GITHUB_HEAD_REF}
  # This workflow contains a single job called "build"
  curl_related_thing:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: curl https://dummy.restapiexample.com/api/v1/create

      - name: curl output
        run: |
            run: |
              # curl -X GET "https://example.com/api/v2/endpoint"
              curl https://dummy.restapiexample.com/api/v1/create

            # Perform the curl command Get
            response=$(curl -s -o /dev/null -w "%{http_code}" https://example.com)
  
            # Check if the status code is not 200
            if [ "$response" -ne 200 ]; then
              echo "Curl request failed with status code $response"
              exit 1  # Mark the build as failed
            fi
  
            echo "Curl request successful with status code $response"

            # Perform the curl command POST
            postresponse=$(curl --location 'https://reqres.in/api/users' \
                      --header 'Content-Type: application/json' \
                      --data '{"name":"morpheus","job":"leader"}')
  
            # # Check if the status code is not 200
            # if [ "$postresponse" -ne 200 ]; then
            #   echo "Curl request failed with status code $response"
            #   exit 1  # Mark the build as failed
            # fi
  
            echo "Curl request successful with status code $postresponse"
            
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
